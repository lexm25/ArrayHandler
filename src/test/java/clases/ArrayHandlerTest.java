/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package clases;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.util.Arrays;
import java.util.Random;
import java.util.function.Consumer;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.MethodOrderer.MethodName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.Timeout;

import helpers.Helper;

/**
 * Esta clase esta preparada para testear el programa main principal de un proyecto
 * interceptando y suplantando tando la entrada como la salida estandar teclado
 * y pantalla
 * @author eserrano
 *
 */
@TestMethodOrder(MethodName.class)
class ArrayHandlerTest {
	
	private final PrintStream standardOut = System.out;
	private final ByteArrayOutputStream outputStreamCaptor = new ByteArrayOutputStream();
	private static final int [][] arraysPruebas = new int [10][];
	private static final int [][] arraysAleatorios = new int [10][];
	
	@BeforeAll
	static void setBasics() {
		
		arraysPruebas[0]=new int[1000];
		arraysPruebas[1]=new int[1000];
		for (int i = 0, b=1000; i < arraysPruebas[0].length; i++,b--) {
			arraysPruebas[0][i]=b;
			arraysPruebas[1][i]=i+1;
		}
		
		int[] testDicotomica = {5,1,5,8,8};
		arraysPruebas[2] = testDicotomica;
		int[] testDicotomica2 = {5,1,3,5,8};
		arraysPruebas[3] = testDicotomica2;
		int[] testDicotomica3 = {-5,1,3,5,8,28,59,147,198,205,206,222,666,888};
		arraysPruebas[4] = testDicotomica3;
		int[] testDicotomica4 = {2,1,2};
		arraysPruebas[5] = testDicotomica4;
		
		//Arrays para los tests de ordenacion
		int[] ordenamientoBasico = {2,5,4,1,3};
		arraysPruebas[6]=ordenamientoBasico;
		//Arrays para los tests de ordenacion
		int[] ordenamientoTrivial = {1,2,3,4,5};
		arraysPruebas[7]=ordenamientoTrivial;
		//Arrays para los tests de ordenacion
		int[] ordenamientoRepetidos = {1,2,3,4,5,1,2,3,4,5};
		arraysPruebas[8]=ordenamientoRepetidos;
		
		//Crea 10 Arrays de forma aleatoria
		Random r = new Random();
		for (int i = 0; i < 10; i++) 
			arraysAleatorios [i] = r.ints(r.nextInt(481)+20, -50, 50).toArray();
	}
	
	@BeforeEach
	public void setUp() {
	    System.setOut(new PrintStream(outputStreamCaptor));
	}
	
	
	@Test
	@DisplayName("Crea Arrays")
	/**
	 * Compila
	 */
	void test01CreaArray() {
		int dim1 = arraysAleatorios[0].length;
		int dim2 = arraysAleatorios[1].length;
		int dim3 = arraysAleatorios[2].length;
		int [] a = {dim1};
		int [] b = {dim1,dim2};
		int [] c = {dim1,dim2,dim3};
		
		test01Uni(a);
		test01Bi(b);
		test01Tri(c);
		
	}
	
	private void test01Uni(int [] array) {
		int [] a = (int [])IntArrayHandler.creaArray(array);
		assertEquals(array[0], a.length);
	}
	
	private void test01Bi(int [] array) {
		int [][] a = (int [][])IntArrayHandler.creaArray(array);
		assertEquals(array[0], a.length);
		for (int i = 0; i < a.length; i++) {
			assertEquals(array[1], a[i].length);
		}
		
	}
	
	private void test01Tri(int [] array) {
		int [][][] a = (int [][][])IntArrayHandler.creaArray(array);
		assertEquals(array[0], a.length);
		for (int i = 0; i < a.length; i++) {
			assertEquals(array[1], a[i].length);
			for (int j = 0; j < a[i].length; j++) {
				assertEquals(array[2], a[i][j].length);
			}
		}
	}
	
	@Test
	@DisplayName("Busqueda Lineal")
	/**
	 * Compila
	 */
	void test01BusquedaLineal() {
		//Elemento no encontrado
		assertEquals( -1 , IntArrayHandler.busquedaLineal(0,arraysPruebas[0]));
		assertEquals( -1 ,IntArrayHandler.busquedaLineal(1001,arraysPruebas[0]));
		//Elemento Encontrado
		assertEquals( 999 ,IntArrayHandler.busquedaLineal(1,arraysPruebas[0]));
		assertEquals( 0 , IntArrayHandler.busquedaLineal(5,arraysPruebas[2]));
		assertEquals( 0 , IntArrayHandler.busquedaLineal(-5,arraysPruebas[4]));
		assertEquals( 10 , IntArrayHandler.busquedaLineal(206,arraysPruebas[4]));
		assertEquals( 13 , IntArrayHandler.busquedaLineal(888,arraysPruebas[4]));
		assertEquals( 0 , IntArrayHandler.busquedaLineal(2,arraysPruebas[5]));
	}
	
	@Test
	@DisplayName("Busqueda Dicotomica")
	@Timeout(5)
	/**
	 * Comprueba la busqueda dicotomica
	 */
	void test02BusquedaDicotomica() {
		
		//assertTimeout(Duration.ofSeconds(2), ()->ArrayHandler.busquedaDicotomica(-1,arraysPruebas[1]));
		//Elemento no encontrado
		assertEquals( -1 , IntArrayHandler.busquedaDicotomica(-1,arraysPruebas[1]));
		//Entrada normal encontrar elemento
		assertEquals( 0 , IntArrayHandler.busquedaDicotomica(1,arraysPruebas[1]));
		assertEquals( 999 , IntArrayHandler.busquedaDicotomica(1000,arraysPruebas[1]));
		assertEquals( 2 , IntArrayHandler.busquedaDicotomica(5,arraysPruebas[2]));
		assertEquals( 3 , IntArrayHandler.busquedaDicotomica(5,arraysPruebas[3]));
		assertEquals( 0 , IntArrayHandler.busquedaDicotomica(-5,arraysPruebas[4]));
		assertEquals( 10 , IntArrayHandler.busquedaDicotomica(206,arraysPruebas[4]));
		assertEquals( 13 , IntArrayHandler.busquedaDicotomica(888,arraysPruebas[4]));
		assertEquals( 2 , IntArrayHandler.busquedaDicotomica(2,arraysPruebas[5]));
	}
	
	@Test
	@DisplayName("Rellena Aleatorio")
	/**
	 * Comprueba la busqueda dicotomica
	 */
	void test03RellenaAleatorio() {
		//assertThrows(NullPointerException.class, ()->ArrayHandler.rellenaAleatorio(null));
		
		int [] p = new int[2000];
		IntArrayHandler.rellenaAleatorio(p);
		assertTrue(compruebaRango(p, -50, 50));
		
		int [] p2 = p.clone();
		IntArrayHandler.rellenaAleatorio(p2);
		assertTrue(compruebaRango(p2, -50, 50));
		
		assertFalse(Arrays.equals(p, p2));
		
	}
	
	private boolean compruebaRango(int []array, int cotaInf, int cotaSup) {
		boolean valido=true;
		for (int i = 0; i < array.length && valido; i++) {
			int j = array[i];
			if(j<cotaInf || j>cotaSup)
				valido=false;
		}		
		return valido;
	}
	
	@Test
	@DisplayName("Comparacion Arrays Unidimensionales")
	/**
	 * Comprueba la busqueda dicotomica
	 */
	void test04EqualsUnidimensional() {
		//assertThrows(NullPointerException.class, ()->ArrayHandler.rellenaAleatorio(null));
		
		int [] p = new int[2000];
		rellenaAleatorio(p);
		
		int [] p2 = p.clone();
		int [] p3 = Arrays.copyOf(p, p.length);	
		int [] vacio1 = new int[10];
		int [][] vacio2 = new int[10][10];
		assertFalse(IntArrayHandler.equals(vacio1, vacio2));
		assertEquals(Arrays.equals(p, p),IntArrayHandler.equals(p, p));	
		assertEquals(Arrays.equals(p, p2),IntArrayHandler.equals(p, p2));
		assertEquals(Arrays.equals(p, p3),IntArrayHandler.equals(p, p3));
		
		int [] b = {1,2,3};
		int [] c = {1,2,1};
		int [] d = {1,2,3};
		int [] e = {1,2,3,4};
		assertEquals(Arrays.equals(b, c),IntArrayHandler.equals(b, c));
		assertEquals(Arrays.equals(b, d),IntArrayHandler.equals(b, d));
		assertEquals(Arrays.equals(b, e),IntArrayHandler.equals(b, e));
	}
	
	@Test
	@DisplayName("Comparacion Arrays Bidimensionales")
	/**
	 * Comprueba la busqueda dicotomica
	 */
	void test05EqualsBidimensional() {
		//assertThrows(NullPointerException.class, ()->ArrayHandler.rellenaAleatorio(null));
		
		int [][] p = new int[2000][2000];
		for (int i = 0; i < p.length; i++) {
			rellenaAleatorio(p[i]);
		}
		
		int [][] p2 = p.clone();
		for (int i = 0; i < p2.length; i++) {
			p2[i]=p[i].clone();
		}
		assertEquals(true,IntArrayHandler.equals(p, p2));
		assertEquals(Arrays.deepEquals(p,p2),IntArrayHandler.equals(p, p2));
		
		int [][] b = {{1,2,3},{1,2,3}};
		int [][] c = {{1,2,3},{1,2,5}};
		int [][] d = {{1,2,3},{1,2,3}};
		int [][] e = {{1,2,3,4},{2,5}};
		int [][] f = {{1,2,3,4},{2,5},{1}};
		assertEquals(false,IntArrayHandler.equals(b, c));
		assertEquals(true,IntArrayHandler.equals(b, d));
		assertEquals(false,IntArrayHandler.equals(b, e));
		assertEquals(Arrays.deepEquals(b,c),IntArrayHandler.equals(b, c));
		assertEquals(Arrays.deepEquals(b,d),IntArrayHandler.equals(b, d));
		assertEquals(Arrays.deepEquals(b,e),IntArrayHandler.equals(b, e));
		assertEquals(Arrays.deepEquals(b,e),IntArrayHandler.equals(b, f));
		
		int [] vacio1 = new int[10];
		int [][] vacio2 = new int[10][10];
		assertFalse(IntArrayHandler.equals(vacio2, vacio1));
	}
	
	@Test
	@DisplayName("Comparacion Arrays Tridimensionales")
	/**
	 * Comprueba la busqueda dicotomica
	 */
	void test06EqualsTridimensional() {
		//assertThrows(NullPointerException.class, ()->ArrayHandler.rellenaAleatorio(null));
		
		int [][][] p = new int[50][50][50] ;
		for (int i = 0; i < p.length; i++) {
			for (int j = 0; j < p.length; j++) {
				rellenaAleatorio(p[i][j]);
			}
		}
		
		int [][][]p2 = p.clone();
		for (int i = 0; i < p2.length; i++) {
			p2[i]=p[i].clone();
			for (int j = 0; j < p2.length; j++) {
				p2[i][j]=p[i][j].clone();
			}
		}
		assertEquals(true,IntArrayHandler.equals(p, p2));
		assertEquals(Arrays.deepEquals(p, p2),IntArrayHandler.equals(p, p2));
		
		int [][][] b = 	{
							{	
								{1,2,3},{1,2,3},{1,2,3}
							},
							{
								{1,2,3},{1,2,3},{1,2,3}
							}
						};
							
		int [][][] c = 	{
							{	
								{1,2,3},{1,2,3},{1,2,3}
							},
							{
								{1,2,3},{1,2,3},{1,2,4}
							}
						};
		int [][][] d = 	{
							{	
								{1,2,3},{1,2,3},{1,2,3}
							},
							{
								{1,2,3},{1,2,3},{1,2,3}
							}
						};
		int [][][] e = 	{
							{	
								{1,2,3},{1,2,3},{1,2,3},{1,2,3},{1,2,3}
							},
							{
								{1},{8,2,3},{1,6,3}
							}
						};
		
		int [][][] f = 	{
				{	
					{1,2,3},{1,2,3},{1,2,3}
				},
				{
					{1,2,3},{1,2,3},{1,2,4}
				},
				{
					{1,2,3},{1,2,3},{1,2,4}
				}
		};
		assertEquals(false,IntArrayHandler.equals(b, c));
		assertEquals(true,IntArrayHandler.equals(b, d));
		assertEquals(false,IntArrayHandler.equals(b, e));
		assertEquals(Arrays.deepEquals(b, c),IntArrayHandler.equals(b, c));
		assertEquals(Arrays.deepEquals(b, d),IntArrayHandler.equals(b, d));
		assertEquals(Arrays.deepEquals(b, e),IntArrayHandler.equals(b, e));
		assertEquals(Arrays.deepEquals(b, e),IntArrayHandler.equals(b, f));
		

		int [] vacio1 = new int[10];
		int [][][] vacio2 = new int[10][10][10];
		assertFalse(IntArrayHandler.equals(vacio2, vacio1));
		assertFalse(IntArrayHandler.equals(vacio1, vacio2));
	}
	
	@Test
	@DisplayName("Gestion Errores Casting")
	/**
	 * Comprueba la busqueda dicotomica
	 */
	void test07EqualsCastException() {
		//assertThrows(NullPointerException.class, ()->ArrayHandler.rellenaAleatorio(null));
		
		int [] a1 = new int[2];
		int [][] a2 = new int[2][2];
		int [][][]a3 = new int[2][2][2];
		
		float [] f1 = new float[2];
		float [][] f2 = new float[2][2];
		float [][][]f3 = new float[2][2][2];
		
		long [] l1 = new long[2];
		long [][] l2 = new long[2][2];
		long [][][]l3 = new long[2][2][2];
		
		assertThrows(ClassCastException.class, ()->IntArrayHandler.equals(a1,f1));
		assertThrows(ClassCastException.class, ()->IntArrayHandler.equals(a1,f2));
		assertThrows(ClassCastException.class, ()->IntArrayHandler.equals(a1,f3));
		assertThrows(ClassCastException.class, ()->IntArrayHandler.equals(a1,l1));
		assertThrows(ClassCastException.class, ()->IntArrayHandler.equals(a1,l2));
		assertThrows(ClassCastException.class, ()->IntArrayHandler.equals(a1,l3));
		assertThrows(ClassCastException.class, ()->IntArrayHandler.equals(a2,f1));
		assertThrows(ClassCastException.class, ()->IntArrayHandler.equals(a2,f2));
		assertThrows(ClassCastException.class, ()->IntArrayHandler.equals(a2,f3));
		assertThrows(ClassCastException.class, ()->IntArrayHandler.equals(a2,l1));
		assertThrows(ClassCastException.class, ()->IntArrayHandler.equals(a2,l2));
		assertThrows(ClassCastException.class, ()->IntArrayHandler.equals(a2,l3));
		assertThrows(ClassCastException.class, ()->IntArrayHandler.equals(a3,f1));
		assertThrows(ClassCastException.class, ()->IntArrayHandler.equals(a3,f2));
		assertThrows(ClassCastException.class, ()->IntArrayHandler.equals(a3,f3));
		assertThrows(ClassCastException.class, ()->IntArrayHandler.equals(a3,l1));
		assertThrows(ClassCastException.class, ()->IntArrayHandler.equals(a3,l2));
		assertThrows(ClassCastException.class, ()->IntArrayHandler.equals(a3,l3));
		
		assertThrows(ClassCastException.class, ()->IntArrayHandler.equals(f1,a1));
		assertThrows(ClassCastException.class, ()->IntArrayHandler.equals(f2,a1));
		assertThrows(ClassCastException.class, ()->IntArrayHandler.equals(f3,a1));
		assertThrows(ClassCastException.class, ()->IntArrayHandler.equals(l1,a1));
		assertThrows(ClassCastException.class, ()->IntArrayHandler.equals(l2,a1));
		assertThrows(ClassCastException.class, ()->IntArrayHandler.equals(l3,a1));
		assertThrows(ClassCastException.class, ()->IntArrayHandler.equals(f1,a1));
		assertThrows(ClassCastException.class, ()->IntArrayHandler.equals(f2,a1));
		assertThrows(ClassCastException.class, ()->IntArrayHandler.equals(f3,a1));
		assertThrows(ClassCastException.class, ()->IntArrayHandler.equals(l1,a1));
		assertThrows(ClassCastException.class, ()->IntArrayHandler.equals(l2,a1));
		assertThrows(ClassCastException.class, ()->IntArrayHandler.equals(l3,a1));
		assertThrows(ClassCastException.class, ()->IntArrayHandler.equals(f1,a1));
		assertThrows(ClassCastException.class, ()->IntArrayHandler.equals(f2,a1));
		assertThrows(ClassCastException.class, ()->IntArrayHandler.equals(f3,a1));
		assertThrows(ClassCastException.class, ()->IntArrayHandler.equals(l1,a1));
		assertThrows(ClassCastException.class, ()->IntArrayHandler.equals(l2,a1));
		assertThrows(ClassCastException.class, ()->IntArrayHandler.equals(l3,a1));
	}
	

	@Test
	@DisplayName("Rellena un array Unidimensional")
	/**
	 * Comprueba la busqueda dicotomica
	 */
	void test08RellenaArrayUni() {
		Random aleatorio = new Random();
		int len = aleatorio.nextInt(95)+5;
		int [] array = new int[len];
		int [] a2=array;
		int [] copia = array.clone();
		IntArrayHandler.rellenaArray(array);
		assertEquals(len, array.length);
		assertEquals(true, array==a2);
		assertEquals(false, Arrays.equals(array, copia));
		IntArrayHandler.rellenaArray(copia);
		assertEquals(len, copia.length);
		assertEquals(false, Arrays.equals(array, copia));
		
	}
	
	@Test
	@DisplayName("Rellena un array Bidimensional")
	/**
	 * Comprueba la busqueda dicotomica
	 */
	void test09RellenaArrayBi() {
		Random aleatorio = new Random();
		int len1 = aleatorio.nextInt(95)+5;
		int len2 = aleatorio.nextInt(95)+5;
		int [][] array = new int[len1][len2];
		int [][] a2=array;
		int [][] copia = array.clone();
		for (int i = 0; i < copia.length; i++) {
			copia[i]=array[i].clone();
		}
		
		IntArrayHandler.rellenaArray(array);
		assertEquals(len1, array.length);
		for (int i = 0; i < array.length; i++) {
			assertEquals(len2, array[i].length);
		}
		assertEquals(false, Arrays.deepEquals(array, copia));
		assertEquals(true, array==a2);
		IntArrayHandler.rellenaArray(copia);
		assertEquals(len1, copia.length);
		for (int i = 0; i < copia.length; i++) {
			assertEquals(len2, copia[i].length);
		}
		assertEquals(false, Arrays.deepEquals(array, copia));
		
	}
	
	@Test
	@DisplayName("Rellena un array Bidimensional")
	/**
	 * Comprueba la busqueda dicotomica
	 */
	void test09RellenaArrayTri() {
		Random aleatorio = new Random();
		int len1 = aleatorio.nextInt(95)+5;
		int len2 = aleatorio.nextInt(95)+5;
		int len3 = aleatorio.nextInt(95)+5;
		int [][][] array = new int[len1][len2][len3];
		int [][][] a2=array;
		int [][][] copia = array.clone();
		for (int i = 0; i < copia.length; i++) {
			copia[i]=array[i].clone();
			for (int j = 0; j < copia[i].length; j++) {
				copia[i][j]=array[i][j].clone();
			}
		}
		
		IntArrayHandler.rellenaArray(array);
		assertEquals(len1, array.length);
		for (int i = 0; i < array.length; i++) {
			assertEquals(len2, array[i].length);
			for (int j = 0; j < copia[i].length; j++) {
				assertEquals(len3, array[i][j].length);
			}
		}
		assertEquals(false, Arrays.deepEquals(array, copia));
		assertEquals(true, array==a2);
		IntArrayHandler.rellenaArray(copia);
		assertEquals(len1, copia.length);
		for (int i = 0; i < copia.length; i++) {
			assertEquals(len2, copia[i].length);
			for (int j = 0; j < copia[i].length; j++) {
				assertEquals(len3, array[i][j].length);
			}
		}
		assertEquals(false, Arrays.deepEquals(array, copia));
		
	}
	
	@Test
	@DisplayName("Ordenamiento por Intercambio")
	/**
	 * Comprueba ordenamiento por intercambio
	 */
	void test10OrdenaIntercambio() {
		long timeStamp = System.currentTimeMillis();
		Helper.resetIntercambios(timeStamp);
		testArrayOrder(value -> IntArrayHandler.ordenaIntercambio(value), arraysPruebas[6]);
		assertEquals( 6 , Helper.getIntercambios());
		assertEquals(timeStamp, Helper.getTimeStamp());
		
		timeStamp=System.currentTimeMillis();
		Helper.resetIntercambios(timeStamp);
		testArrayOrder(value -> IntArrayHandler.ordenaIntercambio(value), arraysPruebas[7]);
		assertEquals(0,Helper.getIntercambios());
		assertEquals(timeStamp, Helper.getTimeStamp());

		testArrayOrder(value -> IntArrayHandler.ordenaIntercambio(value), arraysPruebas[8]);
		
		testeaAleatorios(value -> IntArrayHandler.ordenaIntercambio(value));
		
	}
	
	@Test
	@DisplayName("Ordenamiento por Seleccion")
	/**
	 * Comprueba el ordenamiento por seleccion
	 */
	void test11OrdenaSeleccion() {
		
		long timeStamp = System.currentTimeMillis();
		Helper.resetIntercambios(timeStamp);
		testArrayOrder(value -> IntArrayHandler.ordenaSeleccion(value), arraysPruebas[6]);
		assertEquals( 4 , Helper.getIntercambios());
		assertEquals(timeStamp, Helper.getTimeStamp());
		
		timeStamp=System.currentTimeMillis();
		Helper.resetIntercambios(timeStamp);
		testArrayOrder(value -> IntArrayHandler.ordenaSeleccion(value), arraysPruebas[7]);
		assertEquals(0,Helper.getIntercambios());
		assertEquals(timeStamp, Helper.getTimeStamp());
		
		testArrayOrder(value -> IntArrayHandler.ordenaSeleccion(value), arraysPruebas[8]);

		testeaAleatorios(value -> IntArrayHandler.ordenaSeleccion(value));
		
	}
	
	@Test
	@DisplayName("Ordenamiento por Burbuja")
	/**
	 * Comprueba el ordenamiento por seleccion
	 */
	void test12OrdenaBurbuja() {

		long timeStamp = System.currentTimeMillis();
		Helper.resetIntercambios(timeStamp);
		testArrayOrder(value -> IntArrayHandler.ordenaBurbuja(value), arraysPruebas[6]);
		assertEquals( 6 , Helper.getIntercambios());
		assertEquals(timeStamp, Helper.getTimeStamp());
				
		timeStamp=System.currentTimeMillis();
		Helper.resetIntercambios(timeStamp);
		testArrayOrder(value -> IntArrayHandler.ordenaBurbuja(value), arraysPruebas[7]);
		assertEquals(0,Helper.getIntercambios());
		assertEquals(timeStamp, Helper.getTimeStamp());
		
		testArrayOrder(value -> IntArrayHandler.ordenaBurbuja(value), arraysPruebas[8]);
		
		testeaAleatorios(value -> IntArrayHandler.ordenaBurbuja(value));
		
	}
	
	@Test
	@DisplayName("Ordenamiento Insercion")
	/**
	 * Comprueba el ordenamiento por seleccion
	 */
	void test13Insercion() {
		
		testeaAleatorios(value -> IntArrayHandler.ordenaInsercion(value));
		
	}
	
	@Test
	@DisplayName("Ordenamiento Rapido QuickSort")
	/**
	 * Comprueba el ordenamiento por seleccion
	 */
	void test14QuickSort() {
		long timeStamp = System.currentTimeMillis();
		Helper.resetIntercambios(timeStamp);

		int [] vacio = {};
		IntArrayHandler.quicksort(vacio);
		assertEquals( 0 , Helper.getIntercambios());
		
		int [] unielemento = {1};
		IntArrayHandler.quicksort(unielemento);
		testQsOrder(unielemento);
		
		int [] bielemento = {2,1};
		testArrayOrder(value -> IntArrayHandler.quicksort(value), bielemento);
		testQsOrder(bielemento);

		for(int i = 0; i<7;i++) {
			testArrayOrder(value -> IntArrayHandler.quicksort(value), arraysPruebas[i]);
			testQsOrder(arraysPruebas[i]);
		}
		
		testeaAleatorios(value -> IntArrayHandler.quicksort(value));
		
	}
	
	//Funcion con funcion como parametro para probar arrays aleatorios
	private void testArrayOrder(Consumer<int []> orderMethod, int [] array) {
		int [] copy = array.clone();
		int [] copyOrd = copy.clone();
		Arrays.sort(copyOrd);
		orderMethod.accept(copy);
		assertTrue(Arrays.equals(copy, copyOrd));
	}

	//Funcion con funcion como parametro para probar arrays aleatorios
		private void testQsOrder(int [] array) {
			int [] copy = array.clone();
			int [] copyOrd = copy.clone();
			Arrays.sort(copyOrd);
			IntArrayHandler.qs(copy,0,copy.length-1);
			assertTrue(Arrays.equals(copy, copyOrd));
		}
		
	//Funcion con funcion como parametro para probar arrays aleatorios
	private void testeaAleatorios(Consumer<int []> orderMethod) {
		for (int i = 0; i < 10; i++) {
			int [] alea = arraysAleatorios[i].clone();
			int [] aleaOrd = alea.clone();
			Arrays.sort(aleaOrd);
			orderMethod.accept(alea);
			assertTrue(Arrays.equals(alea, aleaOrd));
		}
	}
	
	private void rellenaAleatorio(int [] ret) {
		Random aleatorio = new Random();
		for (int i = 0; i < ret.length; i++) {
			ret[i]=aleatorio.nextInt(101)-50;
		}
		
	}

	@AfterEach
	void tearDown() {
	    System.setOut(standardOut);
	}
	

}